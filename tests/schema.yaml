---
$schema: http://json-schema.org/draft-07/schema#
type: array
title: "A test file, giving a list of tests"
items:
  type: object
  title: "A test object"
  required:
    - name
    - descr
  oneOf:
    - required:
        - skip
    - required:
        - results
  properties:
    # standard fields
    name:
      type: string
      title: The name of the test.
      value: standard
    descr:
      type: string
      title: A short description of the test.
      value: standard
    skip:
      type: boolean
      title: Signals that a test should not be run.
      default: false
      value: optional
    query:
      $ref: "#/definitions/query"
      title: The query to put to the beacon.
      value: standard
    results:
      $ref: '#/definitions/results'
      value: standard
      title: The expected result.
    beacondata:
      title: A path to a csv file, containing data that should be loaded to the Beacon.
      type: string
      value: standard
      example: >
        # referenceName,referenceBases,alternateBases,variantType,assemblyId,start,end,mateName,datasetId\n
        22,C,A,SNP,GRCh38,17302971,17302972,None,GRCh38:beacon_test:2030-01-01\n
        22,A,G,None,GRCh38,17300407,17300408,None,GRCh38:beacon_test:2030-01-01
    vcf:
      title: An optinal reference to (a variant in) a vcf file.
      type: string
      pattern: ".+:.+"
      example: "filename:id1,id2"
      value: optional
    # optional fields, for using references in tests descriptions
    query_metadata:
      $ref: "#/definitions/query_metadata"
      title: The metadata part of the query.
      value: advanced
    target:
      $ref: "#/definitions/datafields"
      title: The parameters of the query.
      value: advanced
    counts:
      $ref: "#/definitions/datafields"
      title: The expected counts of the query.
      value: advanced
  additionalProperties: false

definitions:
  datafields: &datafields
    # This describes the fields of beacon data, query or a response.
    # Note that this is not an attempt to reformulate the official spec,
    # but a shorter overview allowing all fields to be null.
    referenceName:
      type:
        - string
        - "null"
    referenceBases:
      type:
        - string
        - "null"
    alternateBases:
      type:
        - string
        - "null"
    variantType:
      type:
        - string
        - "null"
    assemblyId:
      type:
        - string
        - "null"
    start:
      type:
        - integer
        - "null"
    end:
      type:
        - integer
        - "null"
    mateName:
      type:
        - string
        - "null"
    sampleCount:
      type:
        - integer
        - "null"
    variantCount:
      type:
        - integer
        - "null"
    callCount:
      type:
        - integer
        - "null"
    frequency:
      type:
        - number
        - "null"

  query:
    title: "Models a query to a Beacon"
    properties:
      <<: *datafields
      includeDatasetResponses:
        type: string
      datasetIds:
        type: array
        items:
          type: string

  query_metadata:
    title: "Models the query metadata"
    properties:
      includeDatasetResponses:
        type: string
      datasetIds:
        type: array
        items:
          type: string
      assemblyId:
        type: string


  results:
    # This section defines how an expected response can be expressed,
    # as well as the available tests methods (assert).
    type: array
    title: "The expected result"
    items:
      type: object
      required:
        - assert
      properties:
        assert:
          type: string
          enum:
            - contains
            - not_contains
            - status_code
            - is_false
            - length_eq
            - length_gt
            - length_lt
        property:
          type: string
          title: name of a field to check
        status_code:
          type: number
          title: the http status to expect
        data:
          type: object
          title: the data expected at the given field
          oneOf:
            - properties:
                <<: *datafields
                datasetId:
                  type: string
                exists:
                  type: boolean
              additionalProperties: false
            - properties:
                id:  # datasetId in response to info call (/)
                  type:
                    - string
                    - "null"
                assemblyId:
                  type:
                    - string
                    - "null"
              additionalProperties: false
        length:
          type: number
      allOf:
        - oneOf:
            - properties:
                assert:
                  enum:
                    - contains
                    - not_contains
              required:
                - data
                - property
            - properties:
                assert:
                  enum:
                    - status_code
              required:
                - status_code
            - properties:
                assert:
                  enum:
                    - length_eq
                    - length_gt
                    - length_lt
              required:
                - length
                - property
            - properties:
                assert:
                  enum:
                    - is_false
                    - is_true
              required:
                - property
